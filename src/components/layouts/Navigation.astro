---
import { Image } from 'astro:assets';

const { pathname } = Astro.url;

// Función para determinar si un enlace está activo
const isActive = (path: string) => {
  if (path === '/') {
    return pathname === '/';
  }
  if (path === '/servicios' || path === '/catalogo') {
    // Para servicios y catálogo que están en la página principal como secciones
    return pathname === '/';
  }
  if (path === '/proyectos') {
    return pathname === '/proyectos' || pathname.startsWith('/proyectos/');
  }
  return pathname === path;
};

// Enlaces de navegación con sus configuraciones
const navLinks = [
  { href: '/', label: 'Inicio', key: 'home' },
  { href: '/#servicios', label: 'Servicios', key: 'servicios' },
  { href: '/proyectos', label: 'Noticias', key: 'proyectos' },
  { href: '/#catalogo', label: 'Catálogo', key: 'catalogo' },
];
---

<nav class='nav-container'>
  <!-- Lado izquierdo (Desktop) -->
  <div class='nav-left desktop-nav'>
    <ul class='nav-list'>
      {
        navLinks.map(link => (
          <a
            href={link.href}
            data-nav={link.key}
          >
            <li class={`nav-items ${isActive(link.href) ? 'active' : ''}`}>
              {link.label}
            </li>
          </a>
        ))
      }
    </ul>
  </div>

  <!-- Botón hamburguesa (Mobile) -->
  <button
    class='hamburger-button mobile-nav'
    id='hamburger-btn'
  >
    <span class='hamburger-line'></span>
    <span class='hamburger-line'></span>
    <span class='hamburger-line'></span>
  </button>

  <!-- Centro - Logo -->
  <a
    href='/'
    class='nav-center'
  >
    <Image
      src='/Logo-Creamor.svg'
      alt='Logo'
      width={95}
      height={95}
    />
  </a>

  <!-- Lado derecho -->
  <div class='nav-right'>
    <a
      class='instagram-button'
      href='https://instagram.com'
      target='_blank'
      rel='noopener noreferrer'
    >
      <svg
        xmlns='http://www.w3.org/2000/svg'
        viewBox='0 0 24 24'
        width='100%'
        height='100%'
        class='instagram-icon'
      >
        <title>instagram</title>
        <path
          fill='currentColor'
          aria-hidden='true'
          focusable='false'
          d='M7.8,2H16.2C19.4,2 22,4.6 22,7.8V16.2A5.8,5.8 0 0,1 16.2,22H7.8C4.6,22 2,19.4 2,16.2V7.8A5.8,5.8 0 0,1 7.8,2M7.6,4A3.6,3.6 0 0,0 4,7.6V16.4C4,18.39 5.61,20 7.6,20H16.4A3.6,3.6 0 0,0 20,16.4V7.6C20,5.61 18.39,4 16.4,4H7.6M17.25,5.5A1.25,1.25 0 0,1 18.5,6.75A1.25,1.25 0 0,1 17.25,8A1.25,1.25 0 0,1 16,6.75A1.25,1.25 0 0,1 17.25,5.5M12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9Z'
        ></path>
      </svg>
    </a>
  </div>

  <!-- Menú móvil (desplegable) -->
  <div
    class='mobile-menu'
    id='mobile-menu'
  >
    <div
      class='mobile-menu-overlay'
      id='menu-overlay'
    >
    </div>
    <div class='mobile-menu-content'>
      <ul class='mobile-nav-list'>
        {
          navLinks.map(link => (
            <li>
              <a
                href={link.href}
                class={`mobile-nav-item ${isActive(link.href) ? 'active' : ''}`}
                data-nav={link.key}
              >
                {link.label}
              </a>
            </li>
          ))
        }
        <hr class='w-full h-[1px] bg-[var(--borders)] mt-4 mb-2' />
        <li>
          <a
            class='instagram-button'
            href='https://instagram.com'
            target='_blank'
            rel='noopener noreferrer'
          >
            <svg
              xmlns='http://www.w3.org/2000/svg'
              viewBox='0 0 24 24'
              width='100%'
              height='100%'
              class='instagram-icon'
            >
              <title>instagram</title>
              <path
                fill='currentColor'
                aria-hidden='true'
                focusable='false'
                d='M7.8,2H16.2C19.4,2 22,4.6 22,7.8V16.2A5.8,5.8 0 0,1 16.2,22H7.8C4.6,22 2,19.4 2,16.2V7.8A5.8,5.8 0 0,1 7.8,2M7.6,4A3.6,3.6 0 0,0 4,7.6V16.4C4,18.39 5.61,20 7.6,20H16.4A3.6,3.6 0 0,0 20,16.4V7.6C20,5.61 18.39,4 16.4,4H7.6M17.25,5.5A1.25,1.25 0 0,1 18.5,6.75A1.25,1.25 0 0,1 17.25,8A1.25,1.25 0 0,1 16,6.75A1.25,1.25 0 0,1 17.25,5.5M12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9Z'
              ></path>
            </svg>
          </a>
        </li>
      </ul>
    </div>
  </div>
  <hr class='w-full mx-8 lg:mx-[auto] mb-5 mt-2 hidden lg:flex col-span-3' />
</nav>

<style>
  @import 'tailwindcss';

  /* FONTS DEFINE ON GLOBAL.CSS */
  .nav-container {
    @apply grid grid-cols-[auto_1fr] lg:grid-cols-[1fr_auto_1fr] justify-items-end lg:justify-items-start;
    @apply items-center lg:items-end;
    @apply w-full lg:max-w-[1200px];
    @apply mx-auto;
    @apply px-8 2xl:px-0 pb-2 pt-4;
    @apply text-[var(--sub-colors)];
  }

  .nav-right {
    @apply justify-self-end items-end hidden lg:flex;
  }

  .nav-list {
    @apply flex gap-5;
    @apply list-none;
    @apply m-0 p-0;
  }

  .nav-items {
    @apply text-[var(--text-colors)];
    @apply text-base;
    @apply transition-all duration-500 cursor-pointer;
    @apply hover:text-[#0F555A] hover:translate-y-[-2px];
    @apply relative;
  }

  /* Estilos para el estado activo */
  .nav-items.active {
    @apply text-[#0F555A] font-semibold;
  }

  .nav-items.active {
    animation: activeSlideIn 0.3s ease-in-out;
  }

  @keyframes activeSlideIn {
    from {
      transform: translateY(2px);
      opacity: 0.8;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .instagram-button {
    @apply flex items-center;
    @apply size-[24px];
    @apply inline-flex;
    @apply cursor-pointer;
    @apply transition-all duration-300 ease-in-out;
  }

  .instagram-button:hover {
    @apply text-[var(--bg-color-green)] translate-y-[-2px];
  }

  /* Botón hamburguesa */
  .hamburger-button {
    @apply hidden;
    @apply flex-col justify-center items-center;
    @apply w-8 h-8;
    @apply bg-transparent border-none;
    @apply cursor-pointer;
    @apply transition-all duration-300;
    @apply z-50 relative order-2;
  }

  .hamburger-line {
    @apply block w-6 h-0.5;
    @apply bg-[var(--text-colors)];
    @apply transition-all duration-300 ease-in-out;
    @apply my-0.5;
  }

  /* Animación del botón hamburguesa cuando está activo */
  .hamburger-button.active .hamburger-line:nth-child(1) {
    @apply transform rotate-45 translate-y-2;
  }

  .hamburger-button.active .hamburger-line:nth-child(2) {
    @apply opacity-0;
  }

  .hamburger-button.active .hamburger-line:nth-child(3) {
    @apply transform -rotate-45 -translate-y-2;
  }

  /* Menú móvil */
  .mobile-menu {
    @apply fixed top-0 left-0 w-full h-full;
    @apply opacity-0 invisible;
    @apply transition-all duration-300 ease-in-out;
    @apply z-40;
  }

  .mobile-menu.active {
    @apply opacity-100 visible;
  }

  .mobile-menu-overlay {
    @apply absolute top-0 left-0 w-full h-full;
    @apply bg-[#000000];
    @apply opacity-80;
  }

  .mobile-menu-content {
    @apply absolute top-0 left-0 w-full;
    @apply bg-white;
    @apply transform -translate-y-full;
    @apply transition-transform duration-300 ease-in-out;
    @apply shadow-lg;
    @apply pt-20 pb-8;
  }

  .mobile-menu.active .mobile-menu-content {
    @apply transform translate-y-0;
  }

  .mobile-nav-list {
    @apply flex flex-col;
    @apply list-none;
    @apply m-0 p-0;
    @apply px-8;
  }

  .mobile-nav-item {
    @apply block;
    @apply text-[var(--text-colors)];
    @apply text-lg;
    @apply py-4;
    @apply border-b border-gray-200;
    @apply transition-colors duration-300;
    @apply cursor-pointer;
    @apply relative;
  }

  .mobile-nav-item:hover {
    @apply text-[var(--bg-color-green)];
  }

  .mobile-nav-item:last-child {
    @apply border-b-0;
  }

  /* Estado activo para móvil */
  .mobile-nav-item.active {
    @apply text-[var(--text-button)] font-semibold;
    @apply bg-[#0F555A] rounded-md px-4 mx-[-16px] shadow-lg;
  }

  /* Clases de control de visibilidad */
  .desktop-nav {
    @apply block;
  }

  .mobile-nav {
    @apply hidden;
  }

  /* MEDIA QUERIES */
  @media (max-width: 768px) {
    .desktop-nav {
      @apply hidden;
    }

    .mobile-nav {
      @apply flex;
    }

    .nav-center {
      @apply justify-self-center order-1;
    }
  }

  @media (max-width: 768px) {
    .nav-container {
      @apply px-4;
      @apply fixed top-0 z-50;
      @apply w-full shadow-lg bg-[var(--background2)];
    }

    .nav-center img {
      @apply w-16 h-16;
    }
  }
</style>

<script>
  const hamburgerBtn = document.getElementById('hamburger-btn');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuOverlay = document.getElementById('menu-overlay');
  const mobileNavItems = document.querySelectorAll('.mobile-nav-item');

  function toggleMenu() {
    if (hamburgerBtn) hamburgerBtn.classList.toggle('active');
    if (mobileMenu) mobileMenu.classList.toggle('active');

    if (mobileMenu && mobileMenu.classList.contains('active')) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
  }

  function closeMenu() {
    if (hamburgerBtn) hamburgerBtn.classList.remove('active');
    if (mobileMenu) mobileMenu.classList.remove('active');
    document.body.style.overflow = '';
  }

  // Solo agregar listeners si existen
  if (hamburgerBtn) hamburgerBtn.addEventListener('click', toggleMenu);
  if (menuOverlay) menuOverlay.addEventListener('click', closeMenu);

  if (mobileNavItems) {
    mobileNavItems.forEach(function (item) {
      item.addEventListener('click', closeMenu);
    });
  }

  window.addEventListener('resize', function () {
    if (window.innerWidth > 768) {
      closeMenu();
    }
  });

  document.addEventListener('keydown', function (e) {
    if (
      e.key === 'Escape' &&
      mobileMenu &&
      mobileMenu.classList.contains('active')
    ) {
      closeMenu();
    }
  });

  // Función para actualizar el estado activo basado en scroll (solo en la página principal)
  function updateActiveNavOnScroll() {
    if (window.location.pathname !== '/') return;

    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('[data-nav]');

    if (sections.length === 0) return;

    let currentSection = '';
    const scrollY = window.scrollY;

    sections.forEach(function (section) {
      const rect = section.getBoundingClientRect();
      const sectionTop = rect.top + scrollY;
      const sectionHeight = rect.height;
      const scrollPosition = scrollY + 200; // Offset para activar antes

      if (
        scrollPosition >= sectionTop &&
        scrollPosition < sectionTop + sectionHeight
      ) {
        currentSection = section.id;
      }
    });

    // Si estamos en la parte superior, activar "inicio"
    if (scrollY < 300 && !currentSection) {
      currentSection = 'inicio';
    }

    // Actualizar estados activos
    navLinks.forEach(function (link) {
      const navKey = link.getAttribute('data-nav');
      const navItem = link.querySelector('.nav-items') || link;

      // Remover estado activo
      navItem.classList.remove('active');

      // Aplicar estado activo según la sección
      if (
        navKey === 'home' &&
        (currentSection === 'inicio' || !currentSection)
      ) {
        navItem.classList.add('active');
      } else if (navKey === 'servicios' && currentSection === 'servicios') {
        navItem.classList.add('active');
      } else if (navKey === 'catalogo' && currentSection === 'catalogo') {
        navItem.classList.add('active');
      }
    });
  }

  // Solo ejecutar el scroll listener en la página principal
  if (window.location.pathname === '/') {
    // Función para inicializar cuando el DOM esté completamente cargado
    function initScrollNavigation() {
      const sections = document.querySelectorAll('section[id]');

      if (sections.length > 0) {
        window.addEventListener('scroll', updateActiveNavOnScroll);
        updateActiveNavOnScroll(); // Ejecutar una vez para establecer estado inicial
      } else {
        // Si no encuentra secciones, intentar de nuevo después de un delay
        setTimeout(initScrollNavigation, 500);
      }
    }

    // Usar múltiples eventos para asegurar que se ejecute
    document.addEventListener('DOMContentLoaded', initScrollNavigation);
    window.addEventListener('load', initScrollNavigation);

    // También intentar inmediatamente si el documento ya está listo
    if (document.readyState !== 'loading') {
      initScrollNavigation();
    }
  }
</script>
